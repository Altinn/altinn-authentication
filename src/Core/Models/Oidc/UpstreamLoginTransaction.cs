using System.Net;

namespace Altinn.Platform.Authentication.Core.Models.Oidc
{
    /// <summary>
    /// Tracks one upstream OpenID Connect authorization flow initiated by Altinn towards an external IdP.
    /// Contains request parameters (state/nonce/PKCE), endpoints, callback result, token validation output,
    /// and diagnostics used for audit, correlation, and security checks.
    /// </summary>
    public sealed class UpstreamLoginTransaction
    {
        /// <summary>
        /// System-generated correlation id for this upstream login attempt (primary key for logs/callbacks).
        /// </summary>
        public required Guid UpstreamRequestId { get; init; }

        /// <summary>
        /// Optional link to the downstream Altinn /authorize request (registered client path).
        /// Mutually exclusive with <see cref="UnregisteredClientRequestId"/>.
        /// </summary>
        public Guid? RequestId { get; init; }

        /// <summary>
        /// Optional link to a downstream request created for an unregistered client case in Altinn.
        /// Mutually exclusive with <see cref="RequestId"/>.
        /// </summary>
        public Guid? UnregisteredClientRequestId { get; set; }

        /// <summary>
        /// Internal lifecycle state (e.g., Created, Redirected, CallbackReceived, TokenExchanged, Completed, Error).
        /// </summary>
        public required string Status { get; init; }

        /// <summary>
        /// When the upstream flow was initiated (used for diagnostics and TTL decisions).
        /// </summary>
        public required DateTimeOffset CreatedAt { get; init; }

        /// <summary>
        /// Absolute expiry for this transaction; protects against replay of stale state/nonce.
        /// </summary>
        public required DateTimeOffset ExpiresAt { get; init; }

        /// <summary>
        /// Timestamp set when the flow reaches a terminal state (success or error).
        /// </summary>
        public DateTimeOffset? CompletedAt { get; init; }

        /// <summary>
        /// Logical upstream provider name (e.g., "id-porten", "feide") selecting discovery and policy.
        /// </summary>
        public required string Provider { get; init; }

        /// <summary>
        /// OAuth2 client_id used by Altinn towards the upstream IdP (may differ from the RP's client_id towards Altinn).
        /// </summary>
        public required string UpstreamClientId { get; init; }

        /// <summary>
        /// OIDC discovery authorization_endpoint where the browser is redirected.
        /// </summary>
        public required Uri AuthorizationEndpoint { get; init; }

        /// <summary>
        /// OIDC discovery token_endpoint used by Altinn to exchange the authorization code for tokens.
        /// </summary>
        public required Uri TokenEndpoint { get; init; }

        /// <summary>
        /// OIDC discovery jwks_uri for validating upstream ID Token signatures (optional if keys are pre-provisioned).
        /// </summary>
        public Uri? JwksUri { get; init; }

        /// <summary>
        /// Redirect URI registered at the upstream IdP for Altinn's upstream client; must match exactly at the IdP.
        /// </summary>
        public required Uri UpstreamRedirectUri { get; init; }

        /// <summary>
        /// OAuth2 state: opaque anti-CSRF value generated by Altinn, verified on callback.
        /// </summary>
        public required string State { get; init; }

        /// <summary>
        /// OIDC nonce: binds returned ID Token to the original request; verified on token validation.
        /// </summary>
        public required string Nonce { get; init; }

        /// <summary>
        /// Requested scopes towards the upstream IdP; always includes "openid". Additional scopes depend on provider needs.
        /// </summary>
        public required string[] Scopes { get; init; }

        /// <summary>
        /// Requested assurance context class references (acr_values). Altinn maps LoA/policy to IdP-specific strings.
        /// </summary>
        public string[]? AcrValues { get; init; }

        /// <summary>
        /// Requested prompt directives (e.g., login, none, consent, select_account) controlling IdP UX.
        /// </summary>
        public string[]? Prompts { get; init; }

        /// <summary>
        /// UI language hints (ui_locales, BCP-47, e.g., "nb", "en") propagated to the upstream IdP.
        /// </summary>
        public string[]? UiLocales { get; init; }

        /// <summary>
        /// max_age (seconds). Forces recent authentication; validated against ID Token auth_time.
        /// </summary>
        public int? MaxAge { get; init; }

        /// <summary>
        /// PKCE code_verifier (RFC 7636). High-entropy secret generated by Altinn; never logged.
        /// </summary>
        public required string CodeVerifier { get; init; }

        /// <summary>
        /// PKCE code_challenge derived from the verifier; sent in the authorization request.
        /// </summary>
        public required string CodeChallenge { get; init; }

        /// <summary>
        /// PKCE method (typically "S256"). Altinn requires S256 when acting as a public client upstream.
        /// </summary>
        public required string CodeChallengeMethod { get; init; }

        // === Callback from upstream authorization endpoint ===

        /// <summary>
        /// Authorization code returned by the upstream on success; exchanged once at the token endpoint.
        /// </summary>
        public string? AuthCode { get; init; }

        /// <summary>
        /// Timestamp when the authorization response (code or error) was received.
        /// </summary>
        public DateTimeOffset? AuthCodeReceivedAt { get; init; }

        /// <summary>
        /// Upstream OAuth2/OIDC error code (e.g., access_denied, login_required) if the authorization request failed.
        /// </summary>
        public string? Error { get; init; }

        /// <summary>
        /// Human-readable upstream error description; stored for diagnostics (not shown verbatim to end users).
        /// </summary>
        public string? ErrorDescription { get; init; }

        // === Result of token exchange and ID Token validation ===

        /// <summary>
        /// Timestamp when token exchange succeeded and tokens were validated.
        /// </summary>
        public DateTimeOffset? TokenExchangedAt { get; init; }

        /// <summary>
        /// Issuer identifier (iss) from the upstream ID Token; must match trusted discovery metadata.
        /// </summary>
        public string? UpstreamIssuer { get; init; }

        /// <summary>
        /// Subject identifier (sub) from the upstream ID Token; Altinn binds local subject based on this and provider.
        /// </summary>
        public string? UpstreamSub { get; init; }

        /// <summary>
        /// Achieved assurance level (acr) from the upstream ID Token; authorization decisions use the achieved value.
        /// </summary>
        public string? UpstreamAcr { get; init; }

        /// <summary>
        /// Authentication time (auth_time) from the upstream ID Token; used to enforce max_age and for audit.
        /// </summary>
        public DateTimeOffset? UpstreamAuthTime { get; init; }

        /// <summary>
        /// ID Token JWT ID (jti) if present; useful for replay diagnostics and tracing.
        /// </summary>
        public string? UpstreamIdTokenJti { get; init; }

        /// <summary>
        /// Upstream session identifier (sid) used for OIDC logout correlation (front/back-channel) with the IdP.
        /// </summary>
        public string? UpstreamSessionSid { get; init; }

        // === Diagnostics / risk / observability ===

        /// <summary>
        /// Cross-service correlation id propagated via headers; enables end-to-end tracing across components.
        /// </summary>
        public Guid? CorrelationId { get; init; }

        /// <summary>
        /// Requester IP at initiation (from Altinn edge); used for security analytics and risk signals.
        /// </summary>
        public IPAddress? CreatedByIp { get; init; }

        /// <summary>
        /// Privacy-preserving hash of the User-Agent string; used to bind session heuristics without storing raw UA.
        /// </summary>
        public string? UserAgentHash { get; init; }
    }
}
