using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Threading;
using System.Threading.Tasks;
using Altinn.Authorization.ProblemDetails;
using Altinn.Platform.Authentication.Configuration;
using Altinn.Platform.Authentication.Core.Constants;
using Altinn.Platform.Authentication.Core.Models;
using Altinn.Platform.Authentication.Core.Models.Parties;
using Altinn.Platform.Authentication.Core.Models.SystemUsers;
using Altinn.Platform.Authentication.Filters;
using Altinn.Platform.Authentication.Helpers;
using Altinn.Platform.Authentication.Model;
using Altinn.Platform.Authentication.Services;
using Altinn.Platform.Authentication.Services.Interfaces;
using AltinnCore.Authentication.Utils;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http.HttpResults;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;

namespace Altinn.Authentication.Controllers;
#nullable enable

/// <summary>
/// CRUD API for Request SystemUser
/// </summary>
/// <remarks>
/// Constructor
/// </remarks>
[Route("authentication/api/v1/systemuser/changerequest")]
[ApiController]
public class ChangeRequestSystemUserController(
    IChangeRequestSystemUser changeRequestService,
    ISystemUserService systemUserService,
    IOptions<GeneralSettings> generalSettings) : ControllerBase
{
    private readonly GeneralSettings _generalSettings = generalSettings.Value;

    /// <summary>
    /// Route for the Created URI
    /// </summary>
    public const string CREATEDURIMIDSECTION = $"authentication/api/v1/systemuser/changerequest/";

    /// <summary>
    /// First part of the Route for the Confirm URL on the Authn.UI that the Vendor can direct their customer to Approve the Request
    /// </summary>
    public const string CONFIRMURL1 = "https://am.ui.";

    /// <summary>
    /// Second part of the Route for the Confirm URL on the Authn.UI that the Vendor can direct their customer to Approve the Request
    /// </summary>
    public const string CONFIRMURL2 = "/accessmanagement/ui/systemuser/changerequest?id=";

    /// <summary>
    /// Query parameter to not choose a reportee when the end user is redirected to the Authn.UI to approve the Request.
    /// </summary>
    public const string REPORTEESELECTIONPARAMETER = "&DONTCHOOSEREPORTEE=true";

    /// <summary>
    /// Route for the Get System by Vendor endpoint
    /// which uses pagination.
    /// </summary>
    public const string ROUTE_VENDOR_GET_REQUESTS_BY_SYSTEM = "vendor/changerequest/bysystem";

    /// <summary>
    /// Called by the Vendor (Sluttbruker System Leverandør) of a Registered System, to change the behaviour of an existing SystemUser.
    /// Creates a new Change-Request for a SystemUser.
    /// To identify the SystemUser to be changed:
    /// either use the SystemUser Id directly if known,
    /// or a combination of the Customer Orgno + Registered SystemId + (optionally) External Reference.    
    /// </summary>
    /// <param name="correllationId">REQUIRED: A new UUID generated by the Vendor, used to uniquely identify the Change Request throughout it's entire lifecylce. Don't set it equal to the SystemUser Id!</param>
    /// <param name="systemUserId">OPTIONAL: The UUID of the targeted SystemUser, if known. Otherwise use the combination of orgno + systemid</param>
    /// <param name="customerOrgno">OPTIONAL: The Organisation Number for the Customer that owns the SystemUser.</param>
    /// <param name="externalRef">OPTIONAL: Either blank, the Orgno for the customer, or a TenantId or other form of disambiguation Id the Vendor needs.</param>
    /// <param name="systemId">OPTIONALThe Id for the Registered System that the SystemUser is based on.</param>
    /// <param name="createRequest">REQUIRED: The request model</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Response model for a ChangeRequest</returns>
    [Authorize(Policy = AuthzConstants.POLICY_SCOPE_SYSTEMUSERREQUEST_WRITE)]    
    [HttpPost("vendor")]
    [ServiceFilter(typeof(TrimStringsActionFilter))]
    public async Task<ActionResult<ChangeRequestResponse>> CreateChangeRequest(
        [FromQuery(Name = "correlation-id")] Guid correllationId,
        [FromQuery(Name = "system-user-id")] Guid? systemUserId,
        [FromQuery(Name = "customer-orgno")] string? customerOrgno,
        [FromQuery(Name = "external-ref")] string? externalRef, 
        [FromQuery(Name = "system-id")] string systemId, 
        [FromBody] ChangeRequestSystemUser createRequest, 
        CancellationToken cancellationToken = default)
    {
        if (correllationId == Guid.Empty)
        {
            return BadRequest("Missing or invalid correlation-id.");
        }

        SystemUser? systemUser = null;
        Result<ChangeRequestResponse> response;

        // Only the Vendor of the Registered System the SystemUser is based on have the authority to ask for a Change Request
        string platform = _generalSettings.PlatformEndpoint;
        OrganisationNumber? vendorOrgNo = RetrieveOrgNoFromToken();
        if (vendorOrgNo is null || vendorOrgNo == OrganisationNumber.Empty()) 
        {
            return Unauthorized();
        }
        
        if (!systemUserId.HasValue && customerOrgno is not null && systemId is not null)
        {
            ExternalRequestId externalRequestId = new()
            {
                ExternalRef = externalRef ?? customerOrgno,
                OrgNo = customerOrgno,
                SystemId = systemId,
            };
            systemUser = await systemUserService.GetSystemUserByExternalRequestId(externalRequestId);            
        }

        if (systemUserId.HasValue)
        {
            systemUser = await systemUserService.GetSingleSystemUserById((Guid)systemUserId);         
        }

        if (systemUser is null)
        {
            return Core.Problems.Problem.SystemUserNotFound.ToActionResult();
        }
        
        var systemVendor = OrganisationNumber.CreateFromStringOrgNo(systemUser.SupplierOrgNo);

        if (systemVendor.ID != vendorOrgNo.ID)
        {
            return Unauthorized();
        }

        // Check to see if all four Required and Unwanted Rights and AccessPackages are empty
        var emptyResponseTest = EmptySetsReturnEmptyResponse(createRequest);
        if (emptyResponseTest)
        {
            ChangeRequestResponse emptyResponse = new()
            {
                RedirectUrl = createRequest.RedirectUrl,
                Id = correllationId,
                Status = ChangeRequestStatus.NoChangeNeeded.ToString(),
                RequiredAccessPackages = [],
                UnwantedAccessPackages = [],
                RequiredRights = [],
                UnwantedRights = [],
                ExternalRef = externalRef ?? customerOrgno,
                ConfirmUrl = string.Empty,
                SystemId = systemUser.SystemId,
                SystemUserId = systemUserId ?? new Guid(systemUser.Id),
                PartyOrgNo = customerOrgno ?? systemUser.ReporteeOrgNo
            };        

            return Ok(emptyResponse);
        }

        // Check to see if the Request already exists, by reporteeOrgno, systemId and ext_ref
        if (!systemUserId.HasValue && customerOrgno is not null && systemId is not null)
        {
            ExternalRequestId externalRequestId = new()
            {
                ExternalRef = externalRef ?? customerOrgno,
                OrgNo = customerOrgno,
                SystemId = systemId,
            };

            response = await changeRequestService.GetChangeRequestByExternalRef(externalRequestId, vendorOrgNo);
            if (response.IsSuccess)
            {
                response.Value.ConfirmUrl = CONFIRMURL1 + _generalSettings.HostName + CONFIRMURL2 + response.Value.Id + REPORTEESELECTIONPARAMETER;
                return Ok(response.Value);
            }
        }

        // Check to see if the Request already exists, by CorrellationId
        if (systemUserId.HasValue)
        {
            response = await changeRequestService.GetChangeRequestByGuid(correllationId, vendorOrgNo);
            if (response.IsSuccess)
            {
                response.Value.ConfirmUrl = CONFIRMURL1 + _generalSettings.HostName + CONFIRMURL2 + response.Value.Id + REPORTEESELECTIONPARAMETER;
                return Ok(response.Value);
            }
        }

        // This is a new Request, create and persist, return the Customer's ConfirmationPageUrl to the Vendor
        response = await changeRequestService.CreateChangeRequest(createRequest, vendorOrgNo, systemUser, correllationId);
        
        if (response.IsSuccess)
        {
            string fullCreatedUri = platform + CREATEDURIMIDSECTION + response.Value.Id;
            response.Value.ConfirmUrl = CONFIRMURL1 + _generalSettings.HostName + CONFIRMURL2 + response.Value.Id + REPORTEESELECTIONPARAMETER;
            return Created(fullCreatedUri, response.Value);
        }

        return response.Problem.ToActionResult();
    }

    private static bool EmptySetsReturnEmptyResponse(ChangeRequestSystemUser createRequest)
    {
        if (createRequest.RequiredRights.Count == 0 &&
            createRequest.UnwantedRights.Count == 0 &&
            createRequest.RequiredAccessPackages.Count == 0 &&
            createRequest.UnwantedAccessPackages.Count == 0)
        {
            return true;
        }

        return false;
    }

    private OrganisationNumber? RetrieveOrgNoFromToken()
    {
        string token = JwtTokenUtil.GetTokenFromContext(HttpContext, _generalSettings.JwtCookieName);
        JwtSecurityToken jwtSecurityToken = new(token);
        foreach (Claim claim in jwtSecurityToken.Claims)
        {
            // ID-porten specific claims
            if (claim.Type.Equals("consumer"))
            {
                return OrganisationNumber.CreateFromMaskinPortenToken(claim.Value);
            }
        }

        return null;
    }

    /// <summary>
    /// Retrieves the Status (Response model) for a Request
    /// based only on the Request.Id GUID
    /// </summary>
    /// <param name="requestId">The UUID for the Request</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Status response model CreateRequestSystemUserResponse</returns>
    [Authorize(Policy = AuthzConstants.POLICY_SCOPE_SYSTEMUSERREQUEST_READ)]
    [HttpGet("vendor/{requestId}")]
    public async Task<ActionResult<ChangeRequestResponse>> GetChangeRequestByGuid(Guid requestId, CancellationToken cancellationToken = default)
    {
        OrganisationNumber? vendorOrgNo = RetrieveOrgNoFromToken();
        if (vendorOrgNo is null || vendorOrgNo == OrganisationNumber.Empty())
        {
            return Unauthorized();
        }

        Result<ChangeRequestResponse> response = await changeRequestService.GetChangeRequestByGuid(requestId, vendorOrgNo);
        if (response.IsProblem)
        {
            return response.Problem.ToActionResult();
        }

        if (response.IsSuccess)
        {
            response.Value.ConfirmUrl = CONFIRMURL1 + _generalSettings.HostName + CONFIRMURL2 + response.Value.Id + REPORTEESELECTIONPARAMETER;
            return Ok(response.Value);
        }

        return NotFound();
    }

    /// <summary>
    /// Retrieves the Status (Response model) for a Request
    /// based on the SystemId, OrgNo and the ExternalRef 
    /// ( which is enforced as a unique combination )
    /// </summary>
    /// <param name="systemId">The Id for the chosen Registered System.</param>
    /// <param name="externalRef">The chosen external ref the Vendor sent in to the Create Request</param>
    /// <param name="orgNo">The organisation number for the customer</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Status response model CreateRequestSystemUserResponse</returns>
    [Authorize(Policy = AuthzConstants.POLICY_SCOPE_SYSTEMUSERREQUEST_READ)]
    [HttpGet("vendor/byexternalref/{systemId}/{orgNo}/{externalRef}")]
    public async Task<ActionResult<ChangeRequestResponse>> GetChangeRequestByExternalRef(string systemId, string externalRef, string orgNo, CancellationToken cancellationToken = default)
    {
        OrganisationNumber? vendorOrgNo = RetrieveOrgNoFromToken();
        if (vendorOrgNo is null || vendorOrgNo == OrganisationNumber.Empty())
        {
            return Unauthorized();
        }

        ExternalRequestId externalRequestId = new()
        {
            ExternalRef = externalRef,
            OrgNo = orgNo,
            SystemId = systemId,
        };

        Result<ChangeRequestResponse> response = await changeRequestService.GetChangeRequestByExternalRef(externalRequestId, vendorOrgNo);
        
        if (response.IsProblem)
        {
            return response.Problem.ToActionResult();
        }
        
        if (response.IsSuccess)
        {
            response.Value.ConfirmUrl = CONFIRMURL1 + _generalSettings.HostName + CONFIRMURL2 + response.Value.Id + REPORTEESELECTIONPARAMETER;
            return Ok(response.Value);
        }

        return BadRequest();
    }

    /// <summary>
    /// Used by the BFF to authenticate the PartyId to retrieve the chosen Request by guid
    /// </summary>
    /// <returns></returns>
    [Authorize(Policy = AuthzConstants.POLICY_ACCESS_MANAGEMENT_READ)]
    [HttpGet("{party}/{requestId}")]
    public async Task<ActionResult<ChangeRequestResponse>> GetRequestByPartyIdAndRequestId(int party, Guid requestId)
    {
        Result<ChangeRequestResponse> res = await changeRequestService.GetChangeRequestByPartyAndRequestId(party, requestId);
        if (res.IsProblem)
        {
            return res.Problem.ToActionResult();
        }

        return Ok(res.Value);
    }

    /// <summary>
    /// Used by the BFF to authenticate the userId to retrieve the chosen Request by guid without partyId
    /// </summary>
    /// <returns></returns>
    [Authorize]
    [HttpGet("{requestId}")]
    public async Task<ActionResult<ChangeRequestResponseInternal>> GetChangeRequestById(Guid requestId)
    {
        Result<ChangeRequestResponseInternal> res = await changeRequestService.CheckUserAuthorizationAndGetRequest(requestId);
        if (res.IsProblem)
        {
            return res.Problem.ToActionResult();
        }

        return Ok(res.Value);
    }

    /// <summary>
    /// Approves the systemuser request and updates the system user
    /// </summary>
    /// <param name="party">the partyId</param>
    /// <param name="requestId">The UUID of the request to be approved</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Status response model CreateRequestSystemUserResponse</returns>
    [Authorize(Policy = AuthzConstants.POLICY_ACCESS_MANAGEMENT_WRITE)]
    [HttpPost("{party}/{requestId}/approve")]
    public async Task<ActionResult<ChangeRequestResponse>> ApproveSystemUserChangeRequest(int party, Guid requestId, CancellationToken cancellationToken = default)
    {
        int userId = AuthenticationHelper.GetUserId(HttpContext);
        Result<bool> response = await changeRequestService.ApproveAndDelegateChangeOnSystemUser(requestId, party, userId, cancellationToken);
        if (response.IsProblem)
        {
            return response.Problem.ToActionResult();
        }

        if (response.IsSuccess)
        {
            return Ok(response.Value);
        }

        return NotFound();
    }

    /// <summary>
    /// Retrieves a list of Status-Response-model for all Requests that the Vendor has for a given system they own.
    /// </summary>
    /// <param name="systemId">The system the Vendor wants the list for</param>
    /// <param name="token">Optional continuation token</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Status response model CreateRequestSystemUserResponse</returns>
    [Authorize(Policy = AuthzConstants.POLICY_SCOPE_SYSTEMUSERREQUEST_READ)]
    [HttpGet("vendor/bysystem/{systemId}", Name = ROUTE_VENDOR_GET_REQUESTS_BY_SYSTEM)]
    public async Task<ActionResult<Paginated<ChangeRequestResponse>>> GetAllChangeRequestsForVendor(
        string systemId,
        [FromQuery(Name = "token")] Opaque<Guid>? token = null,
        CancellationToken cancellationToken = default)
    {
        OrganisationNumber? vendorOrgNo = RetrieveOrgNoFromToken();
        if (vendorOrgNo is null || vendorOrgNo == OrganisationNumber.Empty())
        {
            return Unauthorized();
        }

        Page<Guid>.Request continueFrom = null!;
        if (token?.Value is not null)
        {
            continueFrom = Page.ContinueFrom(token!.Value);
        }

        Result<Page<ChangeRequestResponse, Guid>> pageResult =
          await changeRequestService.GetAllChangeRequestsForVendor(
              vendorOrgNo, systemId, continueFrom, cancellationToken);
        if (pageResult.IsProblem)
        {
            return pageResult.Problem.ToActionResult();
        }

        var nextLink = pageResult.Value.ContinuationToken.HasValue
            ? Url.Link(ROUTE_VENDOR_GET_REQUESTS_BY_SYSTEM, new
            {
                systemId,
                token = Opaque.Create(pageResult.Value.ContinuationToken.Value)
            })
            : null;

        if (pageResult.IsSuccess)
        {
            return Paginated.Create(pageResult.Value.Items.ToList(), nextLink);
        }

        return NotFound();
    }

    /// <summary>
    /// Rejects the systemuser request
    /// </summary>
    /// <param name="party">the partyId</param>
    /// <param name="requestId">The UUID of the request to be rejected</param>
    /// <param name="cancellationToken">The cancellation token</param>
    /// <returns>Status response model CreateRequestSystemUserResponse</returns>
    [Authorize(Policy = AuthzConstants.POLICY_ACCESS_MANAGEMENT_WRITE)]
    [HttpPost("{party}/{requestId}/reject")]
    public async Task<ActionResult<ChangeRequestResponse>> RejectSystemUserChangeRequest(int party, Guid requestId, CancellationToken cancellationToken = default)
    {
        int userId = AuthenticationHelper.GetUserId(HttpContext);
        Result<bool> response = await changeRequestService.RejectChangeOnSystemUser(requestId, userId, cancellationToken);
        if (response.IsProblem)
        {
            return response.Problem.ToActionResult();
        }

        if (response.IsSuccess)
        {
            return Ok(response.Value);
        }

        return NotFound();
    }

    /// <summary>
    /// Used by the Vendors to delete the chosen Request by guid
    /// </summary>
    /// <returns></returns>
    [Authorize(Policy = AuthzConstants.POLICY_SCOPE_SYSTEMUSERREQUEST_WRITE)]
    [HttpDelete("vendor/{requestId}")]
    public async Task<ActionResult<ChangeRequestResponse>> DeleteChangeRequestByRequestId(Guid requestId)
    {
        Result<bool> res = await changeRequestService.DeleteChangeRequestByRequestId(requestId);
        if (res.IsProblem)
        {
            return res.Problem.ToActionResult();
        }

        return Accepted();
    }
}