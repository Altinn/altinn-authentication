using System.Net;
using System.Text.Json;
using Altinn.Platform.Authentication.SystemIntegrationTests.Utils.Builders;
using Xunit;
// ReSharper disable ClassNeverInstantiated.Global

namespace Altinn.Platform.Authentication.SystemIntegrationTests.Utils.TestSetup;

public class ClientDelegationFixture : TestFixture, IAsyncLifetime
{
    public required string SystemId;
    public string? VendorTokenMaskinporten;
    public string? ClientId { get; set; }

    public async Task InitializeAsync()
    {
        VendorTokenMaskinporten = Platform.GetMaskinportenTokenForVendor().Result;
        //Creates System in System Register with these access packages
        string[] accessPackages =
        [
            "urn:altinn:accesspackage:regnskapsforer-med-signeringsrettighet",
            "urn:altinn:accesspackage:regnskapsforer-uten-signeringsrettighet",
            "urn:altinn:accesspackage:regnskapsforer-lonn",
            "urn:altinn:accesspackage:ansvarlig-revisor",
            "urn:altinn:accesspackage:revisormedarbeider",
            "urn:altinn:accesspackage:skattegrunnlag", 
            "urn:altinn:accesspackage:forretningsforer-eiendom"
        ];
        
        SystemId = await CreateSystemWithAccessPackages(accessPackages);
    }

    public async Task DisposeAsync()
    {
        await Platform.Common.DeleteSystem(SystemId, VendorTokenMaskinporten);
    }
    
    // Consider moving this to Common
    public async Task<string> CreateSystemWithAccessPackages(string[] accessPackages)
    {
        var maskinportenToken = await Platform.GetMaskinportenTokenForVendor();
        var vendorId = Platform.EnvironmentHelper.Vendor;
        var systemName = "ClientDelegationAccessPackages " + Guid.NewGuid().ToString("N");
        ClientId = systemName;
        var systemId = $"{vendorId}_{systemName}";

        var system = new SystemRegisterBuilder()
            .WithId(systemId)
            .WithVendor(vendorId)
            .WithName(systemName)
            .WithDescription("This is auto generated by an integration test...")
            .WithAccessPackages(accessPackages)
            .WithRedirectUrl("https://www.vg.no")
            .WithClientId(systemName)
            .IsVisible(false)
            .Build();

        var json = JsonSerializer.Serialize(system, Common.JsonSerializerOptions);
        var response = await Platform.SystemRegisterClient.PostSystem(json, maskinportenToken);

        await Common.AssertResponse(response, HttpStatusCode.OK);
        return systemId;
    }
}